<!-- views/medicalDashboard.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Medical Owner Dashboard</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    #chat-container { border: 1px solid #ccc; padding: 10px; height: 400px; overflow-y: scroll; }
    #message-input { width: 80%; padding: 5px; }
    #send-button { padding: 5px 10px; }
    #typing-indicator { color: gray; }
    #map { height: 400px; width: 100%; }
  </style>
</head>
<body>
  <h1>Welcome, <%= user.fullName %></h1>
  <h2>Connected Users</h2>
  <ul>
    <% users.forEach(user => { %>
      <% if (user._id) { %>
        <li>
          <a href="/medical/realtime-chat/<%= user._id %>"><%= user.FullName || user.fullName || 'Unknown User' %></a>
        </li>
      <% } %>
    <% }); %>
    <% if (users.length === 0) { %>
      <p>No connected users available.</p>
    <% } %>
  </ul>

  <script>
    const socket = io();
    const user = {
      id: '<%= user._id %>',
      role: '<%= user.role %>',
      fullName: '<%= user.fullName %>'
    };

    // Authenticate on connection
    socket.emit('authenticate', {
      userId: user.id,
      role: user.role,
      fullName: user.fullName
    });

    // Initialize map (using Leaflet as an example)
    const map = L.map('map').setView([21.25, 78.27], 13); // Default to Amravati
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: 'Â© OpenStreetMap contributors'
    }).addTo(map);

    const markers = {};

    // Send location updates
    if (navigator.geolocation) {
      navigator.geolocation.watchPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          socket.emit('locationUpdate', { lat: latitude, lng: longitude });
          if (markers[user.id]) {
            markers[user.id].setLatLng([latitude, longitude]);
          } else {
            markers[user.id] = L.marker([latitude, longitude])
              .addTo(map)
              .bindPopup(`${user.fullName} (You)`);
          }
        },
        (err) => console.error('Geolocation error:', err),
        { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
      );
    }

    // Handle user movement
    socket.on('userMoved', ({ userId, role, fullName, lat, lng }) => {
      if (markers[userId]) {
        markers[userId].setLatLng([lat, lng]);
      } else {
        markers[userId] = L.marker([lat, lng])
          .addTo(map)
          .bindPopup(`${fullName} (${role})`);
      }
    });

    // Handle user disconnection
    socket.on('userDisconnected', ({ userId }) => {
      if (markers[userId]) {
        map.removeLayer(markers[userId]);
        delete markers[userId];
      }
    });

    // Chat functionality
    const chatContainer = document.getElementById('chat-container');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const typingIndicator = document.getElementById('typing-indicator');
    let currentRoom = null;

    // Join chat room when navigating to a chat
    function joinChat(receiverId) {
      currentRoom = [user.id, receiverId].sort().join('_');
      socket.emit('joinRoom', { room: currentRoom });
    }

    // Send message
    sendButton.addEventListener('click', () => {
      const message = messageInput.value.trim();
      if (message && currentRoom) {
        socket.emit('chatMessage', {
          room: currentRoom,
          senderId: user.id,
          senderModel: user.role === 'medicalOwner' ? 'MedicalOwner' : 'User',
          receiverId: currentRoom.split('_').find(id => id !== user.id),
          receiverModel: user.role === 'medicalOwner' ? 'User' : 'MedicalOwner',
          message
        });
        messageInput.value = '';
      }
    });

    // Handle typing
    messageInput.addEventListener('input', () => {
      if (currentRoom) {
        socket.emit('typing', { room: currentRoom, sender: user.fullName });
      }
    });

    // Receive messages
    socket.on('chatMessage', ({ senderId, senderModel, message, timestamp }) => {
      const messageElement = document.createElement('div');
      messageElement.textContent = `${senderModel === 'MedicalOwner' ? 'Medical Owner' : 'User'} (${senderId === user.id ? 'You' : 'Other'}): ${message}`;
      chatContainer.appendChild(messageElement);
      chatContainer.scrollTop = chatContainer.scrollHeight;
    });

    // Show typing indicator
    socket.on('typing', ({ sender }) => {
      typingIndicator.textContent = `${sender} is typing...`;
      setTimeout(() => { typingIndicator.textContent = ''; }, 2000);
    });
  </script>
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
</body>
</html>
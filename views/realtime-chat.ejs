<!-- views/realtime-chat.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Realtime Chat</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    #chat-container { border: 1px solid #ccc; padding: 10px; height: 400px; overflow-y: scroll; }
    #message-input { width: 80%; padding: 5px; }
    #send-button { padding: 5px 10px; }
    #typing-indicator { color: gray; }
  </style>
</head>
<body>
 
  <h1>Chat with <%= receiver.FullName || receiver.fullName %></h1>
  <div id="chat-container">
    <% messages.forEach(msg => { %>
      <div>
        <strong><%= msg.senderModel %> (<%= msg.sender.toString() === currentUser._id.toString() ? 'You' : 'Other' %>):</strong>
        <%= msg.message %>
        <small>(<%= msg.timestamp.toLocaleString() %>)</small>
      </div>
    <% }); %>
  </div>
  <input type="text" id="message-input" placeholder="Type a message...">
  <button id="send-button">Send</button>
  <div id="typing-indicator"></div>

  <script>
    const socket = io();
    const currentUser = {
      id: '<%= currentUser._id %>',
      role: '<%= currentRole.toLowerCase() %>',
      fullName: '<%= currentUser.fullName || currentUser.FullName %>'
    };
    const room = '<%= room %>';
    const receiverId = '<%= receiverId %>';
    const senderModel = '<%= currentRole %>';
    const receiverModel = '<%= receiverRole %>';

    // Authenticate
    socket.emit('authenticate', {
      userId: currentUser.id,
      role: currentUser.role,
      fullName: currentUser.fullName
    });

    // Join room
    socket.emit('joinRoom', { room });

    const chatContainer = document.getElementById('chat-container');
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('send-button');
    const typingIndicator = document.getElementById('typing-indicator');

    // Send message
    sendButton.addEventListener('click', () => {
      const message = messageInput.value.trim();
      if (message) {
        socket.emit('chatMessage', {
          room,
          senderId: currentUser.id,
          senderModel,
          receiverId,
          receiverModel,
          message
        });
        messageInput.value = '';
      }
    });

    // Handle typing
    messageInput.addEventListener('input', () => {
      socket.emit('typing', { room, sender: currentUser.fullName });
    });

    // Receive messages
    socket.on('chatMessage', ({ senderId, senderModel, message, timestamp }) => {
      const messageElement = document.createElement('div');
      messageElement.innerHTML = `
        <strong>${senderModel} (${senderId === currentUser.id ? 'You' : 'Other'}):</strong>
        ${message}
        <small>(${new Date(timestamp).toLocaleString()})</small>
      `;
      chatContainer.appendChild(messageElement);
      chatContainer.scrollTop = chatContainer.scrollHeight;
    });

    // Show typing indicator
    socket.on('typing', ({ sender }) => {
      typingIndicator.textContent = `${sender} is typing...`;
      setTimeout(() => { typingIndicator.textContent = ''; }, 2000);
    });
  </script>
</body>
</html>


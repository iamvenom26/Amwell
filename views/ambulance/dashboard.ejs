<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ambulance Dashboard</title>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD-ZzlBxFR_tri1izhOpAyBjWiH9BKS9d0&libraries=geometry"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        #map {
            width: 100%;
            height: 400px;
            border-radius: 4px;
            margin-top: 20px;
        }
        #requests-container {
            margin-top: 20px;
        }
        .request {
            padding: 15px;
            margin-bottom: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
            border: 1px solid #dee2e6;
        }
        .request.accepted {
            background-color: #d4edda;
            border-color: #c3e6cb;
        }
        .request.accepted .status {
            color: #155724;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .btn-container {
            margin-top: 10px;
        }
        .accept, .reject, .chat {
            padding: 8px 16px;
            margin-right: 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }
        .accept {
            background-color: #28a745;
            color: white;
        }
        .reject {
            background-color: #dc3545;
            color: white;
        }
        .chat {
            background-color: #17a2b8;
            color: white;
        }
        .no-requests {
            text-align: center;
            color: #666;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }
        .status-message {
            margin-top: 15px;
            padding: 10px;
            border-radius: 4px;
            text-align: center;
            font-weight: bold;
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
            display: none;
        }
        .status-rejected {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        #distance-info, .distance-info {
            margin-top: 10px;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 4px;
            font-weight: bold;
            text-align: center;
        }
        .speech-toggle {
            margin-bottom: 10px;
        }
        .status-container {
            margin-bottom: 20px;
        }
        #status-select {
            padding: 8px;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Welcome, <%= ambulance.driverName %></h1>
        <div class="speech-toggle">
            <label><input type="checkbox" id="speech-toggle" checked> Enable Voice Announcements</label>
        </div>
        <p><strong>Vehicle Number:</strong> <%= ambulance.vehicleNumber %></p>
        
        <div class="status-container">
            <label for="status-select"><strong>Status:</strong></label>
            <select id="status-select">
                <option value="ONLINE" <%= ambulance.status === 'ONLINE' ? 'selected' : '' %>>Online</option>
                <option value="BUSY" <%= ambulance.status === 'BUSY' ? 'selected' : '' %>>Busy</option>
                <option value="OFFLINE" <%= ambulance.status === 'OFFLINE' ? 'selected' : '' %>>Offline</option>
            </select>
        </div>
        
        <div id="map"></div>
        <div id="status-message" class="status-message"></div>
        <div id="requests-container">
            <% if (typeof requests === 'undefined' || !requests || requests.length === 0) { %>
                <div class="no-requests">Waiting for new requests...</div>
            <% } else { %>
                <% requests.forEach(request => { %>
                    <div class="request <%= request && request.status === 'accepted' ? 'accepted' : '' %>" 
                         data-request-id="<%= request._id %>" 
                         data-user-id="<%= request.userId %>">
                        <p><strong>User Name:</strong> <%= request.FullName || 'Unknown' %></p>
                        <p><strong>Address:</strong> <%= request.userAddress || 'Location shared on map' %></p>
                        <% if (request && request.status === 'accepted') { %>
                            <div class="status">Status: Accepted</div>
                        <% } %>
                        <div class="btn-container">
                            <% if (request && request.status === 'pending') { %>
                                <button class="accept">Accept Request</button>
                                <button class="reject">Reject Request</button>
                            <% } %>
                            <button class="chat" style="display: <%= request && request.status === 'accepted' ? 'inline-block' : 'none' %>;">Chat with User</button>
                        </div>
                        <% if (request && request.status === 'accepted' && request.userLocation) { %>
                            <div class="distance-info">
                                <!-- Distance and ETA will be populated by JavaScript -->
                            </div>
                        <% } %>
                    </div>
                <% }) %>
            <% } %>
        </div>
    </div>

    <script>
        const socket = io('<%= process.env.SOCKET_IO_URL || "http://localhost:128" %>', {
            reconnection: true,
            reconnectionAttempts: 10,
            reconnectionDelay: 1000,
            reconnectionDelayMax: 5000
        });
        const ambulanceId = '<%= ambulance._id %>';
        const driverName = '<%= ambulance.driverName %>';
        let map;
        let ambulanceMarker;
        let userMarker;
        let watchId;
        let initialRequests = [];
        try {
            initialRequests = JSON.parse(
                '<%- JSON.stringify((requests || []).map(req => ({
                    _id: req._id.toString(),
                    userId: req.userId.toString(),
                    userName: req.userName,
                    userAddress: req.userAddress,
                    userLocation: req.userLocation,
                    status: req.status
                }))) %>'
            );
        } catch (err) {
            console.error('[Ambulance Dashboard] Failed to parse initialRequests:', err);
            initialRequests = [];
        }

        console.log('[Ambulance Dashboard] Template variables:', { ambulanceId, driverName, initialRequests });

        socket.on('connect', () => {
            console.log('[Ambulance Dashboard] Socket connected:', socket.id);
            socket.emit('authenticate', {
                userId: ambulanceId,
                role: 'ambulance',
                fullName: driverName || 'Unknown Driver'
            });
        });

        socket.on('reconnect', () => {
            console.log('[Ambulance Dashboard] Socket reconnected:', socket.id);
            socket.emit('authenticate', {
                userId: ambulanceId,
                role: 'ambulance',
                fullName: driverName || 'Unknown Driver'
            });
        });

        socket.on('authSuccess', ({ message }) => {
            console.log('[Ambulance Dashboard] Authentication successful:', message);
            socket.emit('updateStatus', {
                ambulanceId,
                status: 'ONLINE'
            });
            if (Array.isArray(initialRequests)) {
                initialRequests.forEach(request => {
                    if (request.userLocation && request.userLocation.lat && request.userLocation.lng) {
                        updateUserLocation(request);
                    }
                });
            }
        });

        socket.on('authError', ({ message }) => {
            console.error('[Ambulance Dashboard] Authentication failed:', message);
            showStatusMessage('Error: Authentication failed. Please refresh the page.', 'rejected');
            speak('Authentication failed: ' + message);
        });

        socket.on('connect_error', (err) => {
            console.error('[Ambulance Dashboard] Socket connection error:', err.message);
            showStatusMessage('Error: Cannot connect to server. Please check your connection.', 'rejected');
            speak('Cannot connect to server.');
        });

        socket.on('statusUpdated', ({ status }) => {
            console.log('[Ambulance Dashboard] Status updated:', status);
            document.getElementById('status-select').value = status;
            showNotification('Status Updated', `Ambulance status set to ${status}.`);
            speak(`Ambulance status set to ${status}.`);
        });

        socket.on('statusError', ({ message }) => {
            console.error('[Ambulance Dashboard] Status update failed:', message);
            showStatusMessage(message, 'rejected');
            speak(message);
        });

        socket.on('pong', () => {
            console.log('[Ambulance Dashboard] Server is alive');
        });

        setInterval(() => {
            socket.emit('ping');
        }, 30000);

        if (Notification.permission !== 'granted') {
            Notification.requestPermission();
        }

        function showNotification(title, body) {
            if (Notification.permission === 'granted') {
                new Notification(title, { body });
            }
        }

        function speak(text) {
            const speechToggle = document.getElementById('speech-toggle');
            if (speechToggle.checked) {
                const utterance = new SpeechSynthesisUtterance(text);
                window.speechSynthesis.speak(utterance);
            }
        }

        function showStatusMessage(message, type) {
            const statusMessage = document.getElementById('status-message');
            statusMessage.textContent = message;
            statusMessage.style.display = 'block';
            statusMessage.className = `status-message status-${type}`;
        }

        function initMap() {
            try {
                map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 14,
                    center: { lat: 0, lng: 0 }
                });

                if ("geolocation" in navigator) {
                    watchId = navigator.geolocation.watchPosition((position) => {
                        const { latitude: lat, longitude: lng } = position.coords;
                        console.log('[Ambulance Dashboard] Ambulance location:', { lat, lng });
                        
                        if (!ambulanceMarker) {
                            ambulanceMarker = new google.maps.Marker({
                                position: { lat, lng },
                                map: map,
                                icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                                title: 'Ambulance Location'
                            });
                            map.setCenter({ lat, lng });
                        } else {
                            ambulanceMarker.setPosition({ lat, lng });
                        }

                        socket.emit('locationUpdate', { lat, lng });
                    }, (error) => {
                        console.error('[Ambulance Dashboard] Error getting location:', error);
                        showStatusMessage('Error: Could not get ambulance location.', 'rejected');
                        speak('Error: Could not get ambulance location.');
                    });
                } else {
                    console.error('[Ambulance Dashboard] Geolocation not supported');
                    showStatusMessage('Error: Geolocation not supported.', 'rejected');
                    speak('Error: Geolocation not supported.');
                }
            } catch (err) {
                console.error('[Ambulance Dashboard] Map initialization failed:', err);
                showStatusMessage('Error: Failed to load map.', 'rejected');
            }
        }

        document.getElementById('status-select').addEventListener('change', (e) => {
            const newStatus = e.target.value;
            console.log('[Ambulance Dashboard] Changing status to:', newStatus);
            socket.emit('updateStatus', {
                ambulanceId,
                status: newStatus
            });
        });

        socket.on('newAmbulanceRequest', (data) => {
            console.log('[Ambulance Dashboard] Received newAmbulanceRequest:', data);
            const requestsContainer = document.getElementById('requests-container');
            
            const noRequests = requestsContainer.querySelector('.no-requests');
            if (noRequests) {
                noRequests.remove();
            }

            if (!data.userId || !data.userName || !data.requestId) {
                console.error('[Ambulance Dashboard] Invalid request data:', data);
                showStatusMessage('Error: Invalid request received.', 'rejected');
                speak('Error: Invalid request received.');
                return;
            }

            const requestDiv = document.createElement('div');
            requestDiv.className = 'request';
            requestDiv.dataset.requestId = data.requestId;
            requestDiv.dataset.userId = data.userId;
            requestDiv.innerHTML = `
                <p><strong>User Name:</strong> ${data.userName}</p>
                <p><strong>Address:</strong> ${data.userAddress || 'Location shared on map'}</p>
                <div class="btn-container">
                    <button class="accept">Accept Request</button>
                    <button class="reject">Reject Request</button>
                    <button class="chat" style="display: none;">Chat with User</button>
                </div>
            `;

            if (data.userLocation && data.userLocation.lat && data.userLocation.lng) {
                updateUserLocation(data);
            } else {
                console.warn('[Ambulance Dashboard] No valid userLocation in request:', data.userLocation);
            }

            requestDiv.querySelector('.accept').addEventListener('click', () => {
                console.log('[Ambulance Dashboard] Accepting request:', { userId: data.userId, requestId: data.requestId });
                socket.emit('respondToRequest', {
                    userId: data.userId,
                    status: 'accepted',
                    requestId: data.requestId
                });

                requestDiv.classList.add('accepted');
                requestDiv.querySelector('.btn-container').insertAdjacentHTML('beforebegin', `
                    <div class="status">Status: Accepted</div>
                `);

                requestDiv.querySelector('.chat').style.display = 'inline-block';
                requestDiv.querySelector('.accept').style.display = 'none';
                requestDiv.querySelector('.reject').style.display = 'none';

                const otherRequests = requestsContainer.querySelectorAll('.request:not(.accepted)');
                otherRequests.forEach(req => req.remove());
                if (requestsContainer.children.length === 0) {
                    requestsContainer.innerHTML = '<div class="no-requests">No pending requests.</div>';
                }

                showNotification('Request Accepted', `You have accepted the request from ${data.userName}.`);
                speak(`Request accepted from ${data.userName}.`);

                if (data.userLocation && ambulanceMarker) {
                    updateDistanceInfo(requestDiv, data.userLocation);
                }
            });

            requestDiv.querySelector('.reject').addEventListener('click', () => {
                console.log('[Ambulance Dashboard] Rejecting request:', { userId: data.userId, requestId: data.requestId });
                socket.emit('respondToRequest', {
                    userId: data.userId,
                    status: 'rejected',
                    requestId: data.requestId
                });
                requestDiv.remove();
                showNotification('Request Rejected', `You have rejected the request from ${data.userName}.`);
                speak(`Request rejected from ${data.userName}.`);
            });

            requestDiv.querySelector('.chat').addEventListener('click', () => {
                window.location.href = `/ambulance/chat/${data.userId}`;
            });

            requestsContainer.appendChild(requestDiv);
            showNotification('New Ambulance Request', `New request from ${data.userName}.`);
            speak(`New ambulance request from ${data.userName}.`);
        });

        socket.on('userLocation', async (data) => {
            console.log('[Ambulance Dashboard] Received userLocation:', data);
            if (!data.lat || !data.lng || !data.userId) {
                console.error('[Ambulance Dashboard] Invalid userLocation data:', data);
                return;
            }

            const requestDiv = document.querySelector(`.request.accepted[data-user-id="${data.userId}"]`);
            if (!requestDiv) return;

            updateUserLocation({ userId: data.userId, userLocation: { lat: data.lat, lng: data.lng }, requestId: requestDiv.dataset.requestId });
        });

        function updateUserLocation(data) {
            if (!data.userLocation || !data.userLocation.lat || !data.userLocation.lng) return;

            if (!userMarker) {
                userMarker = new google.maps.Marker({
                    position: data.userLocation,
                    map: map,
                    icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
                    title: 'User Location'
                });
            } else {
                userMarker.setPosition(data.userLocation);
            }

            const bounds = new google.maps.LatLngBounds();
            bounds.extend(userMarker.getPosition());
            if (ambulanceMarker) {
                bounds.extend(ambulanceMarker.getPosition());
            }
            map.fitBounds(bounds);

            const requestDiv = document.querySelector(`.request[data-request-id="${data.requestId}"]`);
            if (requestDiv && requestDiv.classList.contains('accepted')) {
                updateDistanceInfo(requestDiv, data.userLocation);
            }
        }

        async function updateDistanceInfo(requestDiv, userLocation) {
            try {
                const userId = requestDiv.dataset.userId;
                if (!userId) {
                    console.error('[Ambulance Dashboard] userId not found in requestDiv dataset');
                    return;
                }
                const response = await fetch(`/ambulance/live-location/${userId}`);
                const data = await response.json();
                if (!data.distanceTime) {
                    throw new Error('Invalid distanceTime data');
                }
                const distanceKm = (data.distanceTime.distance.value / 1000).toFixed(2);
                const etaMinutes = Math.round(data.distanceTime.duration.value / 60);

                let distanceInfo = requestDiv.querySelector('.distance-info');
                if (!distanceInfo) {
                    distanceInfo = document.createElement('div');
                    distanceInfo.className = 'distance-info';
                    requestDiv.appendChild(distanceInfo);
                }
                distanceInfo.innerHTML = `
                    <strong>Distance:</strong> ${distanceKm} km<br>
                    <strong>ETA:</strong> ~${etaMinutes} minutes
                `;
            } catch (err) {
                console.error('[Ambulance Dashboard] Error fetching distance/ETA:', err);
                const distance = google.maps.geometry.spherical.computeDistanceBetween(
                    userMarker.getPosition(),
                    ambulanceMarker.getPosition()
                );
                const distanceKm = (distance / 1000).toFixed(2);
                const etaMinutes = Math.round(distance / (50 * 1000 / 60));
                let distanceInfo = requestDiv.querySelector('.distance-info');
                if (!distanceInfo) {
                    distanceInfo = document.createElement('div');
                    distanceInfo.className = 'distance-info';
                    requestDiv.appendChild(distanceInfo);
                }
                distanceInfo.innerHTML = `
                    <strong>Distance:</strong> ${distanceKm} km<br>
                    <strong>ETA:</strong> ~${etaMinutes} minutes
                `;
            }
        }

        socket.on('ambulanceArrived', ({ userId }) => {
            console.log('[Ambulance Dashboard] Ambulance arrived for user:', userId);
            showStatusMessage('You have arrived at the user’s location!', 'accepted');
            showNotification('Arrival Confirmation', 'You have arrived at the user’s location.');
            speak('You have arrived at the user’s location.');
        });

        socket.on('userDisconnected', ({ userId }) => {
            console.log('[Ambulance Dashboard] User disconnected:', userId);
            showStatusMessage('The user has disconnected.', 'rejected');
            showNotification('User Disconnected', 'The user you were tracking has disconnected.');
            speak('The user has disconnected.');
            if (userMarker) {
                userMarker.setMap(null);
                userMarker = null;
            }
            const acceptedRequest = document.querySelector(`.request.accepted[data-user-id="${userId}"]`);
            if (acceptedRequest) {
                acceptedRequest.remove();
                if (!document.querySelector('.request')) {
                    document.getElementById('requests-container').innerHTML = '<div class="no-requests">Waiting for new requests...</div>';
                }
            }
        });

        socket.on('newChatMessage', ({ sender, message }) => {
            console.log('[Ambulance Dashboard] New chat message:', { sender, message });
            showNotification('New Message', `From ${sender}: ${message}`);
            speak(`New message from ${sender}: ${message}`);
        });

        document.querySelectorAll('.request').forEach(requestDiv => {
            const requestId = requestDiv.dataset.requestId;
            const userId = requestDiv.dataset.userId;

            if (requestDiv.classList.contains('accepted')) {
                requestDiv.querySelector('.chat').addEventListener('click', () => {
                    window.location.href = `/ambulance/chat/${userId}`;
                });
            } else {
                requestDiv.querySelector('.accept')?.addEventListener('click', () => {
                    console.log('[Ambulance Dashboard] Accepting request:', { userId, requestId });
                    socket.emit('respondToRequest', {
                        userId,
                        status: 'accepted',
                        requestId
                    });
                    requestDiv.classList.add('accepted');
                    requestDiv.querySelector('.btn-container').insertAdjacentHTML('beforebegin', `
                        <div class="status">Status: Accepted</div>
                    `);
                    requestDiv.querySelector('.chat').style.display = 'inline-block';
                    requestDiv.querySelector('.accept').style.display = 'none';
                    requestDiv.querySelector('.reject').style.display = 'none';
                    const otherRequests = document.querySelectorAll('.request:not(.accepted)');
                    otherRequests.forEach(req => req.remove());
                    showNotification('Request Accepted', `You have accepted the request.`);
                    speak(`Request accepted.`);
                    const requestData = initialRequests.find(r => r._id === requestId);
                    if (requestData && requestData.userLocation) {
                        updateDistanceInfo(requestDiv, requestData.userLocation);
                    }
                });

                requestDiv.querySelector('.reject')?.addEventListener('click', () => {
                    console.log('[Ambulance Dashboard] Rejecting request:', { userId, requestId });
                    socket.emit('respondToRequest', {
                        userId,
                        status: 'rejected',
                        requestId
                    });
                    requestDiv.remove();
                    showNotification('Request Rejected', `You have rejected the request.`);
                    speak(`Request rejected.`);
                });
            }
        });

        initMap();

        window.addEventListener('beforeunload', () => {
            if (watchId) {
                navigator.geolocation.clearWatch(watchId);
            }
            socket.emit('stopTracking');
            socket.disconnect();
        });
    </script>
</body>
</html>
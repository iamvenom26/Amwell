<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Amwell Live Tracking</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #f0f7ff 0%, #e6f0fa 100%);
      margin: 0;
      padding: 0;
      line-height: 1.6;
    }
    .container {
      max-width: 1200px;
      margin: 40px auto;
      padding: 30px;
      background: #ffffff;
      border-radius: 20px;
      box-shadow: 0 10px 30px rgba(0, 0, 50, 0.1);
      display: flex;
      gap: 20px;
    }
    h2 {
      color: #1a3c6d;
      font-size: 2rem;
      font-weight: 600;
      text-align: center;
      margin-bottom: 30px;
    }
    #map {
      flex: 3;
      height: 70vh;
      border-radius: 15px;
      border: 1px solid #e0e7ff;
      box-shadow: 0 4px 12px rgba(0, 0, 50, 0.1);
    }
    .user-list {
      flex: 1;
      background: #f9fbff;
      padding: 20px;
      border-radius: 15px;
      border: 1px solid #e0e7ff;
      max-height: 70vh;
      overflow-y: auto;
    }
    .user-list::-webkit-scrollbar {
      width: 8px;
    }
    .user-list::-webkit-scrollbar-thumb {
      background: #a3bffa;
      border-radius: 4px;
    }
    .user-list::-webkit-scrollbar-track {
      background: #f0f7ff;
    }
    .user-list h3 {
      color: #1a3c6d;
      font-size: 1.2rem;
      font-weight: 600;
      margin-bottom: 15px;
    }
    .user-item {
      display: flex;
      align-items: center;
      padding: 10px;
      margin: 5px 0;
      background: #ffffff;
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(0, 0, 50, 0.05);
      transition: transform 0.2s ease;
      animation: fadeIn 0.3s ease-in;
    }
    .user-item:hover {
      transform: translateY(-2px);
    }
    .user-icon {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      background: #4c78ff;
      color: #fff;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.9rem;
      margin-right: 10px;
    }
    .user-name {
      color: #1a3c6d;
      font-size: 0.9rem;
      font-weight: 500;
    }
    .error-message {
      display: none;
      color: #ff4d4f;
      text-align: center;
      margin: 10px 0;
      font-size: 0.9rem;
    }
    .error-message.show {
      display: block;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    @media (max-width: 800px) {
      .container {
        flex-direction: column;
        margin: 20px;
        padding: 20px;
      }
      #map, .user-list {
        height: 50vh;
      }
      h2 {
        font-size: 1.5rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div style="width: 100%;">
      <h2>Amwell Live Tracking</h2>
      <div id="map"></div>
      <div class="error-message" id="error-message">Unable to access your location. Please enable location services.</div>
    </div>
    <div class="user-list">
      <h3>Connected Users</h3>
      <div id="user-list"></div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    let map;
    const markers = {}; // Store markers by user ID
    const userList = document.getElementById('user-list');
    const errorMessage = document.getElementById('error-message');

    function initMap() {
      map = new google.maps.Map(document.getElementById('map'), {
        zoom: 14,
        center: { lat: 0, lng: 0 }, // Will be updated by user location
        styles: [
          {
            featureType: 'all',
            elementType: 'labels',
            stylers: [{ visibility: 'on' }],
          },
          {
            featureType: 'road',
            elementType: 'all',
            stylers: [{ saturation: -30 }],
          },
          {
            featureType: 'poi',
            elementType: 'all',
            stylers: [{ visibility: 'simplified' }],
          },
        ],
      });
    }

    // Get and emit user location
    if (navigator.geolocation) {
      navigator.geolocation.watchPosition(
        (pos) => {
          const coords = {
            lat: pos.coords.latitude,
            lng: pos.coords.longitude,
            userId: '<%= user._id %>', // Injected from server
            fullName: '<%= user.FullName %>', // Injected from server
          };
          socket.emit('locationUpdate', coords);
          // Center map on user's location (only for the first update)
          if (!map.getCenter().lat()) {
            map.setCenter(coords);
          }
          errorMessage.classList.remove('show');
        },
        (err) => {
          console.error('Geolocation error:', err);
          errorMessage.classList.add('show');
        },
        { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
      );
    } else {
      errorMessage.classList.add('show');
    }

    // Handle location updates from other users
    socket.on('userMoved', (data) => {
      const { userId, fullName, lat, lng } = data;

      // Update or create marker
      if (markers[userId]) {
        markers[userId].setPosition({ lat, lng });
      } else {
        markers[userId] = new google.maps.Marker({
          map,
          position: { lat, lng },
          icon: {
            url: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
            scaledSize: new google.maps.Size(40, 40),
          },
          title: fullName,
        });
      }

      // Update user list
      const existingUser = document.getElementById(`user-${userId}`);
      if (!existingUser) {
        const userItem = document.createElement('div');
        userItem.id = `user-${userId}`;
        userItem.className = 'user-item';
        userItem.innerHTML = `
          <div class="user-icon">${fullName.charAt(0).toUpperCase()}</div>
          <span class="user-name">${fullName}</span>
        `;
        userList.appendChild(userItem);
      }
    });

    // Remove user when they disconnect
    socket.on('userDisconnected', (userId) => {
      if (markers[userId]) {
        markers[userId].setMap(null);
        delete markers[userId];
      }
      const userItem = document.getElementById(`user-${userId}`);
      if (userItem) {
        userItem.remove();
      }
    });
  </script>
  <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD-ZzlBxFR_tri1izhOpAyBjWiH9BKS9d0&callback=initMap">
  </script>
</body>
</html>